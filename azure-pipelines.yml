# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
name: $(BuildDefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd).$(BuildCounter)

parameters:
- name: SkipDependencyCheck
  displayName: "Skip dependency check"
  type: boolean
  default: false

trigger:
- main
- release/*

pool: NautilusBuild

variables:
- name: BuildConfiguration
  value: "release"
- name: BuildPlatform
  value: "any cpu"
- name: BuildCounter
  value: $[counter(format('{0:yyyyMMdd}', pipeline.startTime), 1)]
- name: UKHOAssemblyCompany
  value: "UK Hydrographic Office"
- name: UKHOAssemblyVersionPrefix
  value: "2.0."
- name: UKHOAssemblyProduct
  value: "File Share Dotnet Client"
- name: SdkVersion
  value: "8.0.x"
- name: DotNetVersion
  value: net8.0
- name: DotNetFrameworkVersion
  value: net48

stages:
- stage: BuildTestPublish
  displayName: Build, test and publish
  dependsOn: []
  jobs:
  - job: MainBuild
    workspace:
      clean: all
    displayName: Build, unit test and package
    variables:
    - group: Client Library Integration Tests
    steps:
    - task: PowerShell@2
      displayName: Output environment variables
      inputs:
        targetType: inline
        script: |
          gci env:
          $CurrentYear = Get-Date -Format "yyyy"
          $AssemblyCopyright = "Copyright Â© UK Hydrographic  Office $CurrentYear"
          echo "##vso[task.setvariable variable=UKHOAssemblyCopyright]${AssemblyCopyright}"

    - task: PowerShell@2
      displayName: Set assembly version numbers based on build ID
      name: SetAssemblyVersion
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)\Apply-AssemblyVersionAndDefaults.ps1'
        arguments: >
          -buildNumber "$(Build.BuildNumber)"
          -solutionDirectory "$(Build.SourcesDirectory)\"
          -UKHOAssemblyCompany "$env:UKHOAssemblyCompany"
          -UKHOAssemblyCopyright "$env:UKHOAssemblyCopyright"
          -UKHOAssemblyVersionPrefix "$env:UKHOAssemblyVersionPrefix"
          -UKHOAssemblyProduct "$env:UKHOAssemblyProduct"
          -SourceRevisionId "$(Build.SourceVersion)"
          
    - task: UseDotNet@2
      displayName: Use .NET $(SdkVersion) sdk
      inputs:
        packageType: sdk
        version: $(SdkVersion)

    - task: DotNetCoreCLI@2
      displayName: FSS libraries package restore
      inputs:
        command: restore
        projects: |
          **/*.csproj
          !**/*Tests*.csproj
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
        workingDirectory: '$(Build.SourcesDirectory)'
        packagesDirectory: '$(Build.SourcesDirectory)\packages'

    - script: dependency-check.bat --project "File-Share-Service-.Net-Client - $(Build.SourceBranchName)" --scan "$(Build.SourcesDirectory)" --out "$(Build.SourcesDirectory)\DCReport" --suppression $(Build.SourcesDirectory)\NVDSuppressions.xml --noupdate
      displayName: Run OWASP dependency-check
      condition: ne('${{ parameters.SkipDependencyCheck }}', true)

    - task: PublishBuildArtifacts@1
      condition: ne('${{ parameters.SkipDependencyCheck }}', true)
      displayName: Publish OWASP dependency-check report
      inputs:
        PathtoPublish: $(Build.SourcesDirectory)\DCReport
        ArtifactName: OWASP Dependency-Check Report

    - task: PowerShell@1
      condition: ne('${{ parameters.SkipDependencyCheck }}', true)
      displayName: Fail build if OWASP dependency-check finds any vulnerabilities
      inputs:
        scriptType: inlineScript
        arguments: '-ReportLocation $(Build.SourcesDirectory)\DCReport\*'
        inlineScript: |
          param($ReportLocation)
          Invoke-VulnerabilityCheck -ReportLocation $ReportLocation

    - task: DotNetCoreCLI@2
      displayName: Unit test package restore
      inputs:
        command: restore
        projects: |
          **/*Tests*.csproj
          !**/FileShareClientIntegrationTests.csproj
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
        workingDirectory: '$(Build.SourcesDirectory)'
        packagesDirectory: '$(Build.SourcesDirectory)\packagesForTests'

    - template: Deployment/unit-test.yml
      parameters:
        BuildTaskFramework: $(DotNetFrameworkVersion)

    - template: Deployment/unit-test.yml
      parameters:
        BuildTaskFramework: $(DotNetVersion)
    
    - task: DotNetCoreCLI@2
      displayName: Pack FSS libraries
      inputs:
        command: pack
        packagesToPack: '**/FileShareClient.csproj;**/FileShareAdminClient.csproj'
        packDirectory: $(Build.ArtifactStagingDirectory)/packages
        arguments:  '--configuration $(BuildConfiguration)'

    - task: PowerShell@2
      displayName: Update integration tests project file
      inputs:
        targetType: filePath
        filePath: '$(Build.SourcesDirectory)\AddProjectReferences.ps1'
        arguments: >
          -SourcesDirectory "$(Build.SourcesDirectory)"
          -NuGetVersion "$(SetAssemblyVersion.NuGetVersion)"
          -PackagePath "$(Build.ArtifactStagingDirectory)\packages"

    - task: DotNetCoreCLI@2
      displayName: Integration tests package restore
      inputs:
        command: restore
        projects: |
          **/FileShareClientIntegrationTests.csproj
        feedsToUse: config
        noCache: true
        nugetConfigPath: '$(Build.SourcesDirectory)\BuildNuget.config'
        restoreDirectory: '$(Build.SourcesDirectory)\packagesForTests'

    - task: DotNetCoreCLI@2
      displayName: Build integration tests - $(DotNetFrameworkVersion)
      inputs:
        command: build
        projects: |
          **/FileShareClientIntegrationTests.csproj
        arguments: '--framework $(DotNetFrameworkVersion) --configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)\IntegrationTests\$(DotNetFrameworkVersion) --no-restore'

    - task: DotNetCoreCLI@2
      displayName: Build integration tests - $(DotNetVersion)
      inputs:
        command: build
        projects: |
          **/FileShareClientIntegrationTests.csproj
        arguments: '--framework $(DotNetVersion) --configuration $(BuildConfiguration) --output $(Build.BinariesDirectory)\IntegrationTests\$(DotNetVersion) --no-restore'

    - task: PublishPipelineArtifact@1
      displayName: Publish integration tests artifact
      inputs:
        path: $(Build.BinariesDirectory)\IntegrationTests
        artifact: IntegrationTests
          
    - task: PublishPipelineArtifact@1
      displayName: Publish NuGet packages
      inputs:
        path: $(Build.ArtifactStagingDirectory)/packages
        artifact: NuGetPackages

  - job:
    dependsOn: MainBuild
    displayName: Integration tests
    variables:
    - group: Client Library Integration Tests
    steps:
    - checkout: none
  
    - download: current
      displayName: Download integration tests
      artifact: IntegrationTests

    - template: Deployment/integration-test.yml
      parameters:
        BuildTaskFramework: $(DotNetFrameworkVersion)

    - template: Deployment/integration-test.yml
      parameters:
        BuildTaskFramework: $(DotNetVersion)

- stage: Proget
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
  - group: nuget-deployment-vars
  jobs:
  - deployment: Publish_To_ProGetCloud
    displayName: Publish To ProGetCloud
    pool:
      name: NautilusRelease
    environment: FileShareDotNetClient-ProGet
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:              
          - task: UseDotNet@2
            displayName: 'Use .NET $(SdkVersion) sdk'
            inputs:
              packageType: sdk
              version: $(SdkVersion)

          - download: current
            artifact: NuGetPackages

          - powershell: Get-ChildItem "$(Pipeline.Workspace)/NuGetPackages/*.nupkg" -File | Foreach {dotnet nuget push $_.fullname -k $(progetApiKey) -s https://progetcloud.ukho.gov.uk/nuget/ukho.trusted/v3/index.json }
            env:
              progetApiKey : $(progetApiKey)
            displayName: Publish Package
            
- stage: Nuget
  condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
  variables:
  - group: nuget-deployment-vars
  jobs:
  - deployment: Publish_To_NuGet
    displayName: Publish To NuGet
    pool: 
      name: NautilusRelease
    environment: FileShareDotNetClient-NuGet
    workspace:
      clean: all
    strategy:
      runOnce:
        deploy:
          steps:
          - task: UseDotNet@2
            displayName: 'Use .NET $(SdkVersion) sdk'
            inputs:
              packageType: sdk
              version: $(SdkVersion)

          - download: current
            artifact: NuGetPackages

          - powershell: Get-ChildItem "$(Pipeline.Workspace)/NuGetPackages/UKHO.FileShareClient.*.nupkg" -File | Foreach {dotnet nuget push $_.fullname -k $(nugetApiKey) -s https://api.nuget.org/v3/index.json --no-symbols true}
            env:
              nugetApiKey : $(nugetApiKey)
            displayName: Publish Package
